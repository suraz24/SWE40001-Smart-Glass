<!DOCTYPE html>
<html>

<head>

     <title>SGBRGS Admin</title>

</head>

<body>

     <canvas id="canvas" style="display:none;"></canvas>
     <button type="button" id="calibrateBtn">Calibrate</button>

     <img id="calibrateImg" style="width:300px; height:300px; border: 1px solid red">

     <div id="message"></div>

     <script src="/socket.io/socket.io.js"></script>
     <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>

     <script>
          var socket = io.connect({ reconnection: false });

          var calibrateBtn = document.querySelector('#calibrateBtn');
          var canvas = document.querySelector('#canvas');
          var calibrateImg = document.querySelector('#calibrateImg');
          var message = document.querySelector('#message');

          socket.on('admin_snapshot', data => {
               if (data) {
                    calibrateImg.src = data;
               } else {
                    message.innerHTML = "Error while getting snapshot";
               }
          })
          
          calibrateBtn.addEventListener('click', () => {
               socket.emit('admin_get_snapshot');
          })

          calibrateImg.addEventListener('click', (e) => {
               console.log(e);
               var x = e.offsetX;
               var y = e.offsetY;

               canvas.width = calibrateImg.width;
               canvas.height = calibrateImg.height;
               var context = canvas.getContext('2d');

               context.drawImage(calibrateImg, 0, 0, calibrateImg.width, calibrateImg.height);

               var p = context.getImageData(x, y, 1, 1).data;

               message.innerHTML = rgbToHsv(p[0], p[1], p[2]).toString();
          })


          function rgbToHsv(r, g, b) {
               r /= 255, g /= 255, b /= 255;

               var max = Math.max(r, g, b), min = Math.min(r, g, b);
               var h, s, v = max;

               var d = max - min;
               s = max == 0 ? 0 : d / max;

               if (max == min) {
                    h = 0; // achromatic
               } else {
                    switch (max) {
                         case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                         case g: h = (b - r) / d + 2; break;
                         case b: h = (r - g) / d + 4; break;
                    }

                    h /= 6;
               }

               return [h, s, v];
          }



          // useCanvas(canvas, img, function () {
          //      var p = canvas.getContext('2d')
          //           .getImageData(x, y, 1, 1).data;
          //      result.innerHTML = '<span>HEX: ' + rgbToHex(p[0], p[1], p[2]) + '</span>' +
          //      '<span>RGB:  rgb(' +
          //      p[0] + ',' +
          //      p[1] + ',' +
          //      p[2] + ')</span>';

          //      document.body.style.background = rgbToHex(p[0], p[1], p[2]);
          // }


          // function update(picker) {
          //      document.getElementById('hex-str').innerHTML = picker.toHEXString();
          //      document.getElementById('rgb-str').innerHTML = picker.toRGBString();

          //      document.getElementById('rgb').innerHTML =
          //           Math.round(picker.rgb[0]) + ', ' +
          //           Math.round(picker.rgb[1]) + ', ' +
          //           Math.round(picker.rgb[2]);

          //      document.getElementById('hsv').innerHTML =
          //           Math.round(picker.hsv[0]) + '&deg;, ' +
          //           Math.round(picker.hsv[1]) + '%, ' +
          //           Math.round(picker.hsv[2]) + '%';
          // }



     </script>
</body>

</html>